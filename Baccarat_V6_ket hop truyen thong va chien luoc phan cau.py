
import streamlit as st
import pandas as pd
from collections import Counter

st.set_page_config(page_title="Baccarat V6 - Truy·ªÅn Th·ªëng & Ph·∫£n C·∫ßu", layout="wide")
st.title("‚ôüÔ∏è Baccarat V6: K·∫øt H·ª£p C·∫ßu Truy·ªÅn Th·ªëng & Chi·∫øn L∆∞·ª£c Ph·∫£n C·∫ßu")

st.write("üî§ Nh·∫≠p nhi·ªÅu chu·ªói k·∫øt qu·∫£ Baccarat (m·ªói d√≤ng 1 b√†n, v√≠ d·ª•: BBPPBPBBP)")

input_text = st.text_area("üì• Nh·∫≠p d·ªØ li·ªáu b√†n:", height=200)

# Ph√¢n t√≠ch t·ª´ng b√†n
def analyze_table(results, table_id):
    last = results[-1]
    traps = []
    streak = 1
    for i in range(len(results) - 2, -1, -1):
        if results[i] == last:
            streak += 1
        else:
            break
    cau_truyen_thong = ""
    if streak >= 3:
        cau_truyen_thong = f"C·∫ßu B·ªát {last} ({streak})"
    elif len(results) >= 6:
        if all(results[-i] != results[-i - 1] for i in range(1, 4)):
            cau_truyen_thong = "C·∫ßu 1-1"

    if streak >= 5:
        traps.append(f"B·ªát {last} ({streak})")
    if len(results) >= 6:
        last6 = results[-6:]
        if last6[0] != last6[1] and last6[1] != last6[2] and last6[2] != last6[3]:
            traps.append("1-1 l·∫∑p")

    counter = Counter(results)
    total = len(results)
    b_pct = counter['B'] / total * 100 if 'B' in counter else 0
    p_pct = counter['P'] / total * 100 if 'P' in counter else 0
    diff = abs(b_pct - p_pct)
    bias = "C√¢n b·∫±ng"
    if diff >= 30:
        bias = "L·ªách m·∫°nh"
    elif diff >= 15:
        bias = "L·ªách nh·∫π"

    rhythm = ""
    if len(results) >= 4:
        last4 = results[-4:]
        if last4.count(last4[0]) == 4:
            rhythm = "1 m√†u 4 l·∫ßn"
        elif len(set(last4)) == 4:
            rhythm = "Nhi·ªÖu cao"
        else:
            rhythm = "·ªîn ƒë·ªãnh"

    score = 0
    if traps: score += 3
    if bias == "L·ªách m·∫°nh": score += 2
    elif bias == "L·ªách nh·∫π": score += 1
    if "1 m√†u" in rhythm: score += 2
    elif "Nhi·ªÖu" in rhythm: score += 1

    # G·ª£i √Ω truy·ªÅn th·ªëng
    if cau_truyen_thong:
        theo_cau = f"üü¢ Theo {cau_truyen_thong}"
    else:
        theo_cau = "‚ö™ Ch∆∞a h√¨nh th√†nh c·∫ßu"

    # G·ª£i √Ω ph·∫£n c·∫ßu
    if score >= 6:
        phan_cau = "üß® ƒê√°nh NG∆Ø·ª¢C m·∫°nh"
    elif score >= 3:
        phan_cau = "‚ö†Ô∏è C√¢n nh·∫Øc ƒë√°nh ng∆∞·ª£c"
    else:
        phan_cau = "üü¢ Kh√¥ng n√™n ph·∫£n c·∫ßu"

    return {
        "B√†n": f"B√†n {table_id}",
        "D√†i": len(results),
        "C·∫ßu truy·ªÅn th·ªëng": cau_truyen_thong or "Kh√¥ng r√µ",
        "Theo c·∫ßu": theo_cau,
        "B·∫´y c·∫ßu": ", ".join(traps) if traps else "Kh√¥ng",
        "L·ªách B/P": f"B: {b_pct:.1f}% - P: {p_pct:.1f}%",
        "Nh·ªãp b√†n": rhythm,
        "ƒêi·ªÉm ph·∫£n c·∫ßu": score,
        "G·ª£i √Ω ph·∫£n c·∫ßu": phan_cau
    }

# Ph√¢n t√≠ch to√†n b·ªô
if input_text.strip():
    rows = input_text.strip().splitlines()
    all_results = []
    for idx, line in enumerate(rows, 1):
        clean = [c for c in line.upper() if c in ['B', 'P']]
        if len(clean) >= 6:
            result = analyze_table(clean, idx)
            all_results.append(result)

    if all_results:
        df = pd.DataFrame(all_results)
        st.subheader("üìã T·ªïng h·ª£p C·∫ßu Truy·ªÅn Th·ªëng & Ph·∫£n C·∫ßu:")
        st.dataframe(df)

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button("üì• T·∫£i b·∫£ng ph√¢n t√≠ch CSV", data=csv, file_name="cau_truyen_thong_vs_phan_cau.csv", mime="text/csv")
    else:
        st.warning("‚ö†Ô∏è M·ªói b√†n c·∫ßn √≠t nh·∫•t 6 k·∫øt qu·∫£!")
